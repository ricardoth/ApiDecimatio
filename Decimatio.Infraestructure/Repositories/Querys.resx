<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CAMBIAR_CONTRASENA" xml:space="preserve">
    <value>UPDATE dbo.Usuario
SET Contrasena = @Contrasena
WHERE IdUsuario = @IdUsuario

IF @@ROWCOUNT &gt; 0
   SELECT 1 
ELSE
   SELECT 0</value>
    <comment>Cambia contraseña del usuario</comment>
  </data>
  <data name="DELETE_EVENTO" xml:space="preserve">
    <value>UPDATE dbo.Evento
SET Activo = 0
WHERE IdEvento = @IdEvento</value>
    <comment>Elimina Evento (Soft delete)</comment>
  </data>
  <data name="DELETE_LUGAR" xml:space="preserve">
    <value>UPDATE [dbo].[Lugar]
   SET 
      [Activo] = 0
 WHERE IdLugar = @IdLugar</value>
    <comment>Elimina un Lugar (Soft Delete)</comment>
  </data>
  <data name="DELETE_MEDIO_PAGO" xml:space="preserve">
    <value>UPDATE [dbo].[MedioPago]
   SET 
      [Activo] = 0
 WHERE IdMedioPago = @IdMedioPago</value>
    <comment>Eliminar MedioPago</comment>
  </data>
  <data name="DELETE_SECTOR" xml:space="preserve">
    <value>UPDATE dbo.Sector
SET 	Activo = 0
WHERE 	IdSector = @IdSector</value>
    <comment>Elimina un Sector (Soft Delete)</comment>
  </data>
  <data name="DELETE_TICKET" xml:space="preserve">
    <value>UPDATE dbo.Ticket
SET Activo = @Activo,
FechaModified = GETDATE()
WHERE IdTicket = @IdTicket

UPDATE dbo.TicketQR
SET Activo = @Activo
WHERE IdTicket = @IdTicket</value>
    <comment>Desactiva el Ticket con su QR</comment>
  </data>
  <data name="DELETE_USUARIO" xml:space="preserve">
    <value>UPDATE [dbo].[Usuario]
   SET
       [Activo] = 0
 WHERE IdUsuario = @IdUsuario</value>
    <comment>Elimina un Usuario (Soft Delete)</comment>
  </data>
  <data name="GET_ACCESOS_TICKET" xml:space="preserve">
    <value>SELECT 
	   AE.IdAccesoEvento
          ,AE.IdTicket
	  ,T.IdUsuario
	  ,U.Rut
	  ,U.Dv
	  ,U.Nombres
	  ,U.ApellidoP
	  ,U.ApellidoM
      ,AE.IdEstadoTicket
	  ,ET.EstadoTicket
      ,AE.FechaHoraEntrada
      ,AE.FechaHoraSalida
      ,T.IdEvento
      ,E.NombreEvento
      ,T.IdSector
      ,S.NombreSector
FROM dbo.AccesoEvento AE
	INNER JOIN dbo.Ticket T ON T.IdTicket = AE.IdTicket AND T.Activo = 1
	INNER JOIN dbo.Usuario U ON U.IdUsuario = T.IdUsuario
	INNER JOIN dbo.EstadoTicket ET ON ET.IdEstadoTicket = AE.IdEstadoTicket
	INNER JOIN dbo.Evento E ON E.IdEvento = T.IdEvento
	INNER JOIN dbo.Sector S ON S.IdSector = T.IdSector
ORDER BY AE.IdAccesoEvento DESC</value>
    <comment>Get Accesos Ticket para mostrar</comment>
  </data>
  <data name="GET_COMUNAS_BY_REGION" xml:space="preserve">
    <value>SELECT 
	   IdComuna
      ,IdRegion
      ,NombreComuna
      ,Activo
  FROM dbo.Comuna
  WHERE IdRegion = @IdRegion</value>
    <comment>Get All Comunas By Región</comment>
  </data>
  <data name="GET_EVENTOS" xml:space="preserve">
    <value>SELECT E.IdEvento
      ,E.IdLugar
      ,E.NombreEvento
      ,E.Descripcion
      ,E.Direccion
      ,E.Fecha
      ,E.Flyer
      ,E.ContenidoFlyer
      ,E.Observacion
      ,E.ProductoraResponsable
	  ,E.Banner
	  ,E.ContenidoBanner
      ,E.Activo
      ,L.IdLugar
      ,L.NombreLugar
      ,L.Ubicacion
      ,L.Numeracion
      ,L.MapaReferencial
  FROM dbo.Evento E
	INNER JOIN dbo.Lugar L ON L.IdLugar = E.IdLugar</value>
    <comment>Get All Eventos</comment>
  </data>
  <data name="GET_EVENTOS_FILTRO" xml:space="preserve">
    <value>SELECT E.[IdEvento]
      ,E.[IdLugar]
      ,E.[NombreEvento]
      ,E.[Descripcion]
      ,E.[Direccion]
      ,E.[Fecha]
      ,E.[Flyer]
      ,E.[ContenidoFlyer]
      ,E.[Observacion]
      ,E.[ProductoraResponsable]
      ,E.[Banner]
      ,E.[ContenidoBanner]
      ,E.[Activo]
	  ,L.IdLugar
	  ,L.NombreLugar
  FROM [dbo].[Evento] E
	INNER JOIN dbo.Lugar L ON L.IdLugar = E.IdLugar
  WHERE (E.NombreEvento LIKE '%'+@Filtro+'%'
	OR L.NombreLugar LIKE '%'+ @Filtro+'%')
	AND E.Activo = 1</value>
    <comment>Get Eventos por nombre evento o nombre lugar</comment>
  </data>
  <data name="GET_EVENTO_ID" xml:space="preserve">
    <value>SELECT 
	   E.IdEvento
      ,E.IdLugar
      ,E.NombreEvento
	  ,E.Descripcion
      ,E.Direccion
      ,E.Fecha
	  ,E.Flyer
	  ,E.ContenidoFlyer
	  ,E.Observacion
	  ,E.ProductoraResponsable
	    ,E.Banner
	  ,E.ContenidoBanner
      ,E.Activo
	  ,L.NombreLugar
	  ,L.Ubicacion
	  ,L.Numeracion
	  ,L.MapaReferencial
  FROM [dbo].[Evento] E
	INNER JOIN dbo.Lugar L ON L.IdLugar = E.IdLugar
  WHERE IdEvento = @IdEvento</value>
    <comment>Get Evento By Id</comment>
  </data>
  <data name="GET_INFO_TICKET" xml:space="preserve">
    <value>SELECT t.IdTicket, t.IdUsuario, t.IdEvento, t.IdSector, t.IdMedioPago,
        t.MontoPago, t.MontoTotal, t.FechaTicket, t.Activo, t.FechaCreacion, t.FechaModified,
        u.*, e.*, s.*, m.*, TQR.*, L.*,
		c.*, r.*
FROM Ticket t
INNER JOIN Usuario u ON t.IdUsuario = u.IdUsuario
INNER JOIN Evento e ON t.IdEvento = e.IdEvento
INNER JOIN [dbo].[Lugar] L ON L.IdLugar = E.IdLugar
INNER JOIN Sector s ON t.IdSector = s.IdSector
INNER JOIN MedioPago m ON t.IdMedioPago = m.IdMedioPago
LEFT JOIN TicketQR TQR ON TQR.IdTicket = T.IdTicket
INNER JOIN Comuna c on c.IdComuna = L.IdComuna
INNER JOIN Region r on r.IdRegion = c.IdRegion
WHERE T.IdTicket = @IdTicket</value>
    <comment>GET TICKET CON INFO USUARIO Y QR</comment>
  </data>
  <data name="GET_LUGARES" xml:space="preserve">
    <value>SELECT L.IdLugar
      ,L.IdComuna
      ,L.NombreLugar
      ,L.Ubicacion
      ,L.Numeracion
      ,L.FechaCreacion
	  ,L.MapaReferencial
      ,L.Activo
	  ,C.IdComuna
	  ,C.IdRegion
	  ,C.NombreComuna
	  ,R.IdRegion
	  ,R.NombreRegion
	  ,R.Abreviatura
  FROM dbo.Lugar L
  INNER JOIN dbo.Comuna C ON C.IdComuna = L.IdComuna
  INNER JOIN dbo.Region R ON R.IdRegion = C.IdRegion</value>
    <comment>Get All Lugares</comment>
  </data>
  <data name="GET_LUGAR_ID" xml:space="preserve">
    <value>SELECT L.IdLugar
      ,L.IdComuna
      ,L.NombreLugar
      ,L.Ubicacion
      ,L.Numeracion
      ,L.FechaCreacion
	  ,L.MapaReferencial
      ,L.Activo
	  ,C.IdComuna
	  ,C.IdRegion
	  ,C.NombreComuna
	  ,R.IdRegion
	  ,R.NombreRegion
	  ,R.Abreviatura
  FROM dbo.Lugar L
	  INNER JOIN dbo.Comuna C ON C.IdComuna = L.IdComuna
	  INNER JOIN dbo.Region R ON R.IdRegion = C.IdRegion
  WHERE L.IdLugar = @IdLugar</value>
    <comment>Get Solo un Lugar</comment>
  </data>
  <data name="GET_MEDIOS_PAGOS" xml:space="preserve">
    <value>SELECT  [IdMedioPago]
      ,[NombreMedioPago]
      ,[Descripcion]
      ,[UrlImageBlob]
      ,[Activo]
  FROM [dbo].[MedioPago]</value>
    <comment>Get All Medios Pagos</comment>
  </data>
  <data name="GET_MEDIO_PAGO" xml:space="preserve">
    <value>SELECT  [IdMedioPago]
      ,[NombreMedioPago]
      ,[Descripcion]
	  ,[UrlImageBlob]
      ,[Activo]
  FROM [dbo].[MedioPago] WHERE IdMedioPago = @IdMedioPago</value>
    <comment>Get Solo un Medio Pago</comment>
  </data>
  <data name="GET_PREFERENCE_TICKETS_BY_TRANSACTION" xml:space="preserve">
    <value>SELECT P.[IdPreference]
      ,P.[PreferenceCode]
      ,P.[TransactionId]
      ,P.[IdUsuario]
      ,P.[IdEvento]
      ,P.[IdSector]
      ,P.[IdMedioPago]
      ,P.[MontoPago]
      ,P.[MontoTotal]
      ,P.[FechaTicket]
      ,P.[Activo]
      ,S.IdSector
      ,S.NombreSector
      ,E.IdEvento
      ,E.NombreEvento
      ,MP.IdMedioPago
      ,MP.NombreMedioPago
  FROM [dbo].[PreferenceTicket] P
	INNER JOIN dbo.Sector S ON S.IdSector = P.IdSector
        INNER JOIN dbo.Evento E ON E.IdEvento = P.IdEvento
	INNER JOIN dbo.MedioPago MP ON MP.IdMedioPago = P.IdMedioPago
  WHERE TransactionId = @TransactionId</value>
    <comment>Obtiene los tickets asociados a un pago</comment>
  </data>
  <data name="GET_REGIONES" xml:space="preserve">
    <value>SELECT IdRegion
      ,NumeroRegion
      ,Abreviatura
      ,NombreRegion
      ,Activo
  FROM dbo.Region</value>
    <comment>Get All Regiones</comment>
  </data>
  <data name="GET_SECTORES" xml:space="preserve">
    <value>SELECT S.[IdSector]
      ,S.IdEvento
      ,S.[NombreSector]
      ,S.[CapacidadDisponible]
	  ,S.[CapacidadActual]
      ,S.[CapacidadTotal]
	  ,S.Precio
	  ,S.Cargo
	  ,S.Total
	  ,S.ColorHexa
      ,S.[Activo]
	  ,E.IdEvento
	  ,E.NombreEvento
  FROM [dbo].[Sector] S
	INNER JOIN dbo.Evento E ON E.IdEvento = S.IdEvento</value>
    <comment>Get All Sectores</comment>
  </data>
  <data name="GET_SECTORES_BY_EVENTO" xml:space="preserve">
    <value>SELECT S.[IdSector]
      ,S.[IdEvento]
      ,S.[NombreSector]
      ,S.[CapacidadDisponible]
	  ,S.[CapacidadActual]
      ,S.[CapacidadTotal]
      ,S.Precio
	  ,S.Cargo
	  ,S.Total
	  ,S.ColorHexa
      ,S.[Activo]
	  ,E.IdEvento
	  ,E.NombreEvento
  FROM [dbo].[Sector] S
	INNER JOIN Evento E ON E.IdEvento = S.IdEvento
  WHERE E.IdEvento = @IdEvento</value>
    <comment>Get all Sectores por Id Evento</comment>
  </data>
  <data name="GET_SECTOR_ID" xml:space="preserve">
    <value>SELECT S.[IdSector]
      ,S.IdEvento
      ,S.[NombreSector]
	  ,S.[CapacidadDisponible]
	  ,S.[CapacidadActual]
      ,S.[CapacidadTotal]
	  ,S.Precio
	  ,S.Cargo
	  ,S.Total
	  ,S.ColorHexa
      ,S.[Activo]
  FROM [dbo].[Sector] S
  WHERE S.IdSector = @IdSector</value>
    <comment>Get Sector por Id</comment>
  </data>
  <data name="GET_TICKETS" xml:space="preserve">
    <value>SELECT t.IdTicket, t.IdUsuario, t.IdEvento, t.IdSector, t.IdMedioPago,
        t.MontoPago, t.MontoTotal, t.FechaTicket, t.Activo, t.FechaCreacion, t.FechaModified,
        u.*, e.*, s.*, m.*, TQR.*, L.*,
		c.*, r.*
FROM Ticket t
INNER JOIN Usuario u ON t.IdUsuario = u.IdUsuario
INNER JOIN Evento e ON t.IdEvento = e.IdEvento
INNER JOIN [dbo].[Lugar] L ON L.IdLugar = E.IdLugar
INNER JOIN Sector s ON t.IdSector = s.IdSector
INNER JOIN MedioPago m ON t.IdMedioPago = m.IdMedioPago
LEFT JOIN TicketQR TQR ON TQR.IdTicket = T.IdTicket
INNER JOIN Comuna c on c.IdComuna = L.IdComuna
INNER JOIN Region r on r.IdRegion = c.IdRegion
ORDER BY t.IdTicket DESC</value>
    <comment>Get All Tickets</comment>
  </data>
  <data name="GET_TICKET_ID" xml:space="preserve">
    <value>SELECT TQ.* , T.*
FROM dbo.Ticket T
	LEFT JOIN dbo.TicketQR TQ ON T.IdTicket =  TQ.IdTicket
WHERE T.IdTicket = @IdTicket</value>
    <comment>Get Ticket QR</comment>
  </data>
  <data name="GET_TIPO_USUARIO" xml:space="preserve">
    <value>SELECT [IdTipoUsuario]
      ,[NombreTipoUsuario]
      ,[Activo]
  FROM [dbo].[TipoUsuario]</value>
    <comment>Get All TipoUsuario</comment>
  </data>
  <data name="GET_USUARIOS" xml:space="preserve">
    <value>SELECT U.[IdUsuario]
      ,U.[IdTipoUsuario]
      ,U.[Rut]
      ,U.[DV]
      ,U.[Nombres]
      ,U.[ApellidoP]
      ,U.[ApellidoM]
      ,U.[Direccion]
      ,U.[Telefono]
      ,U.[Correo]
      ,U.[Activo]
      ,U.EsExtranjero
      ,U.[FechaCreacion]
	  ,TU.IdTipoUsuario
	  ,TU.NombreTipoUsuario
  FROM [dbo].[Usuario] U
	INNER JOIN dbo.TipoUsuario TU ON TU.IdTipoUsuario = U.IdTipoUsuario</value>
    <comment>Get All Users</comment>
  </data>
  <data name="GET_USUARIOS_FILTRO" xml:space="preserve">
    <value>SELECT [IdUsuario]
      ,U.[IdTipoUsuario]
	  ,NombreTipoUsuario
      ,[Rut]
      ,[DV]
      ,[Nombres]
      ,[ApellidoP]
      ,[ApellidoM]
      ,[Direccion]
      ,[Telefono]
      ,[Correo]
      ,U.[Activo]
      ,U.[EsExtranjero]
      ,U.[FechaCreacion]
  FROM [dbo].[Usuario] U
	INNER JOIN dbo.TipoUsuario TU ON TU.IdTipoUsuario = U.IdTipoUsuario
  WHERE Nombres LIKE '%'+@Filtro+'%'
	OR ApellidoP LIKE '%'+ @Filtro+'%'
	OR ApellidoM LIKE '%'+ @Filtro+'%'
	OR CAST(Rut AS VARCHAR) LIKE '%'+ @Filtro+'%'</value>
    <comment>Get usuarios por filtro nombre, rut y otros</comment>
  </data>
  <data name="GET_USUARIO_CORREO" xml:space="preserve">
    <value>SELECT TOP 1 [IdUsuario]
      ,[IdTipoUsuario]
      ,[Rut]
      ,[DV]
      ,[Nombres]
      ,[ApellidoP]
      ,[ApellidoM]
      ,[Direccion]
      ,[Telefono]
      ,[Correo]
      ,[Activo]
      ,[EsExtranjero]
      ,[FechaCreacion]
  FROM [dbo].[Usuario]
  WHERE 
  Correo = @Correo
  AND Nombres = @Nombres
  AND ApellidoP = @ApellidoP
  AND ApellidoM = @ApellidoM
  AND EsExtranjero = 1</value>
    <comment>Se obtiene el usuario por correo para casos de extranjeros</comment>
  </data>
  <data name="GET_USUARIO_ID" xml:space="preserve">
    <value>SELECT [IdUsuario]
      ,[IdTipoUsuario]
      ,[Rut]
      ,[DV]
      ,[Nombres]
      ,[ApellidoP]
      ,[ApellidoM]
      ,[Direccion]
      ,[Telefono]
      ,[Correo]
      ,[Activo]
      ,[EsExtranjero]
      ,[FechaCreacion]
  FROM [dbo].[Usuario]
  WHERE IdUsuario = @IdUsuario</value>
    <comment>Get Usuario por Id</comment>
  </data>
  <data name="GET_USUARIO_RUT" xml:space="preserve">
    <value>SELECT [IdUsuario]
      ,[IdTipoUsuario]
      ,[Rut]
      ,[DV]
      ,[Nombres]
      ,[ApellidoP]
      ,[ApellidoM]
      ,[Direccion]
      ,[Telefono]
      ,[Correo]
      ,[Activo]
      ,[EsExtranjero]
      ,[FechaCreacion]
  FROM [dbo].[Usuario]
  WHERE CONCAT(Rut, DV) = @RutDv</value>
    <comment>Obtiene el usuario por rut y dv</comment>
  </data>
  <data name="INSERT SECTOR" xml:space="preserve">
    <value>INSERT INTO dbo.Sector(
	IdEvento,
	NombreSector,
	CapacidadDisponible,
	CapacidadActual,
	CapacidadTotal,
	Precio,
	Cargo,
	Total,
	ColorHexa,
	Activo
)
VALUES(
	@IdEvento,
	@NombreSector,
	@CapacidadDisponible,
	@CapacidadActual,
	@CapacidadTotal,
	@Precio,
	@Cargo,
	@Total,
	@ColorHexa,
	@Activo
)</value>
    <comment>Insert Sector</comment>
  </data>
  <data name="INSERT_ACCESO_EVENTO_IN" xml:space="preserve">
    <value>INSERT INTO dbo.AccesoEvento
(
	IdTicket,
	IdEstadoTicket,
	FechaHoraEntrada,
	FechaHoraSalida
)

VALUES (
	@IdTicket,
	@IdEstadoTicket,
	@FechaHoraEntrada,
	NULL
)</value>
    <comment>Registra un acceso de la persona con Ticket</comment>
  </data>
  <data name="INSERT_ACCESO_EVENTO_OUT" xml:space="preserve">
    <value>UPDATE dbo.AccesoEvento
SET FechaHoraSalida = GETDATE()
WHERE IdAccesoEvento = @IdAccesoEvento</value>
    <comment>Registra una salida de una persona del evento</comment>
  </data>
  <data name="INSERT_EVENTO" xml:space="preserve">
    <value>INSERT INTO dbo.Evento(
	IdLugar,
	NombreEvento,
	Descripcion,
	Direccion,
	Fecha,
	Flyer,
	ContenidoFlyer,
	Observacion,
	ProductoraResponsable,
	Banner,
	ContenidoBanner,
	Activo
)

VALUES (
	@IdLugar,
	@NombreEvento,
	@Descripcion,
	@Direccion,
	@Fecha,
	@Flyer,
	@ContenidoFlyer,
	@Observacion,
	@ProductoraResponsable,
	@Banner,
	@ContenidoBanner,
	@Activo
)</value>
    <comment>Insert Evento</comment>
  </data>
  <data name="INSERT_LUGAR" xml:space="preserve">
    <value>INSERT INTO [dbo].[Lugar]
           ([IdComuna]
           ,[NombreLugar]
           ,[Ubicacion]
           ,[Numeracion]
           ,[FechaCreacion]
           ,[MapaReferencial]
           ,[Activo])
     VALUES
           (@IdComuna
           ,@NombreLugar
           ,@Ubicacion
           ,@Numeracion
           ,GETDATE()
          ,@MapaReferencial
           ,@Activo)</value>
    <comment>Insert Lugar</comment>
  </data>
  <data name="INSERT_MEDIO_PAGO" xml:space="preserve">
    <value>INSERT INTO [dbo].[MedioPago]
           ([NombreMedioPago]
           ,[Descripcion]
           ,[UrlImageBlob]
           ,[Activo])
     VALUES
           (@NombreMedioPago
  ,@Descripcion
	,@UrlImageBlob
           ,@Activo)</value>
    <comment>Insert MedioPago</comment>
  </data>
  <data name="INSERT_PREFERENCE_TICKET" xml:space="preserve">
    <value>INSERT INTO dbo.PreferenceTicket(
	PreferenceCode,
	TransactionId,
	IdUsuario,
	IdEvento,
	IdSector,
	IdMedioPago,
	MontoPago,
	MontoTotal,
	FechaTicket,
	Descargados,
	Activo
)

VALUES (
	@PreferenceCode,
	@TransactionId,
	@IdUsuario,
	@IdEvento,
	@IdSector,
	@IdMedioPago,
	@MontoPago,
	@MontoTotal,
	@FechaTicket,
	@Descargados,
	@Activo
)

IF @@ROWCOUNT &gt; 0
   SELECT 1 
ELSE
   SELECT 0</value>
    <comment>Inserta un pago de ticket y retorna el código</comment>
  </data>
  <data name="INSERT_TICKET" xml:space="preserve">
    <value>UPDATE dbo.Sector 
SET CapacidadDisponible = CapacidadDisponible - 1,
	CapacidadActual = CapacidadActual + 1
WHERE IdSector = @IdSector
	AND IdEvento =  @IdEvento

INSERT INTO [dbo].[Ticket]
           ([IdUsuario]
           ,[IdEvento]
           ,[IdSector]
           ,[IdMedioPago]
           ,[MontoPago]
           ,[MontoTotal]
           ,[FechaTicket]
           ,[Activo]
           ,[FechaCreacion])
     VALUES
           (@IdUsuario
           ,@IdEvento
           ,@IdSector
           ,@IdMedioPago
           ,@MontoPago
           ,@MontoTotal
           ,@FechaTicket
           ,1
           ,GETDATE()) 
	SELECT CAST(SCOPE_IDENTITY() as int)</value>
    <comment>Insert Ticket</comment>
  </data>
  <data name="INSERT_TICKETQR" xml:space="preserve">
    <value>INSERT INTO [dbo].[TicketQR]
           ([IdTicket]
           ,[Contenido]
           ,[NombreTicketComprobante]
           ,[Activo]
           ,[FechaCreacion])
     VALUES
           (@IdTicket
           ,@Contenido
           ,@NombreTicketComprobante
           ,1
           ,GETDATE())</value>
    <comment>Insert Ticket QR</comment>
  </data>
  <data name="INSERT_USUARIO" xml:space="preserve">
    <value>INSERT INTO [dbo].[Usuario]
           ([IdTipoUsuario]
           ,[Rut]
           ,[DV]
           ,[Nombres]
           ,[ApellidoP]
           ,[ApellidoM]
           ,[Direccion]
           ,[Telefono]
           ,[Correo]
           ,Contrasena
           ,[Activo]
           ,[EsExtranjero]
           ,[FechaCreacion])
     VALUES
           (@IdTipoUsuario
           ,@Rut
           ,@Dv
           ,@Nombres
           ,@ApellidoP
           ,@ApellidoM
           ,@Direccion
           ,@Telefono
           ,@Correo
           ,@Contrasena
           ,@Activo
 	   ,@EsExtranjero
           ,GETDATE())</value>
    <comment>Inserta un nuevo Usuario</comment>
  </data>
  <data name="LOGIN_USUARIO" xml:space="preserve">
    <value>SELECT [IdUsuario]
      ,[IdTipoUsuario]
      ,[Rut]
      ,[DV]
      ,[Nombres]
      ,[ApellidoP]
      ,[ApellidoM]
      ,[Direccion]
      ,[Telefono]
      ,[Correo]
      ,[Contrasena]
      ,[Activo]
      ,[FechaCreacion]
  FROM [dbo].[Usuario]
  WHERE Correo = @Correo</value>
    <comment>Valida un usuario por correo y contraseña</comment>
  </data>
  <data name="UPDATE_EVENTO" xml:space="preserve">
    <value>UPDATE dbo.Evento
SET IdLugar = @IdLugar,
	NombreEvento = @NombreEvento,
	Descripcion = @Descripcion,
	Direccion = @Direccion,
	Fecha = @Fecha,
	Flyer = @Flyer,
	ContenidoFlyer = @ContenidoFlyer,
	Observacion = @Observacion,
	ProductoraResponsable = @ProductoraResponsable,
	Banner = @Banner,
	ContenidoBanner = @ContenidoBanner,
	Activo = @Activo
WHERE IdEvento = @IdEvento


IF @@ROWCOUNT &gt; 0
   SELECT 1 
ELSE
   SELECT 0</value>
    <comment>Actualiza Evento</comment>
  </data>
  <data name="UPDATE_LUGAR" xml:space="preserve">
    <value>UPDATE [dbo].[Lugar]
   SET [IdComuna] = @IdComuna
      ,[NombreLugar] = @NombreLugar
      ,[Ubicacion] = @Ubicacion
      ,[Numeracion] = @Numeracion
      ,[FechaCreacion] = GETDATE()
	  ,MapaReferencial = @MapaReferencial
      ,[Activo] = @Activo
 WHERE IdLugar = @IdLugar

IF @@ROWCOUNT &gt; 0
   SELECT 1 
ELSE
   SELECT 0</value>
    <comment>Actualiza un Lugar</comment>
  </data>
  <data name="UPDATE_MEDIO_PAGO" xml:space="preserve">
    <value>UPDATE dbo.MedioPago 
SET [NombreMedioPago] = @NombreMedioPago
           ,[Descripcion] = @Descripcion
	   ,[UrlImageBlob] = @UrlImageBlob
           ,[Activo] = @Activo 
WHERE IdMedioPago = @IdMedioPago

IF @@ROWCOUNT &gt; 0
   SELECT 1 
ELSE
   SELECT 0</value>
    <comment>Actualiza MedioPago</comment>
  </data>
  <data name="UPDATE_SECTOR" xml:space="preserve">
    <value>UPDATE dbo.Sector
SET 	IdEvento = @IdEvento,
	NombreSector = @NombreSector,
	CapacidadDisponible = @CapacidadDisponible,
	CapacidadActual = @CapacidadActual,
	CapacidadTotal = @CapacidadTotal,
	Precio = @Precio,
	Cargo = @Cargo,
	Total = @Total,
	ColorHexa = @ColorHexa,
	Activo = @Activo
WHERE 	IdSector = @IdSector

IF @@ROWCOUNT &gt; 0
   SELECT 1 
ELSE
   SELECT 0</value>
    <comment>Actualiza un Sector</comment>
  </data>
  <data name="UPDATE_USUARIO" xml:space="preserve">
    <value>UPDATE [dbo].[Usuario]
   SET [IdTipoUsuario] = @IdTipoUsuario
      ,[Rut] = @Rut
      ,[DV] = @Dv
      ,[Nombres] = @Nombres
      ,[ApellidoP] = @ApellidoP
      ,[ApellidoM] = @ApellidoM
      ,[Direccion] = @Direccion
      ,[Telefono] = @Telefono
      ,[Correo] = @Correo
      ,[Activo] = @Activo
      ,[EsExtranjero] = @EsExtranjero
      ,[FechaCreacion] = GETDATE()
 WHERE IdUsuario = @IdUsuario

IF @@ROWCOUNT &gt; 0
   SELECT 1 
ELSE
   SELECT 0</value>
    <comment>Actualiza un Usuario</comment>
  </data>
  <data name="VALIDAR_ACCESO_TICKET" xml:space="preserve">
    <value>dbo.sp_ValidarTicket @IdTicket,  @Rut, @Dv, @IdEvento</value>
    <comment>Valida si un ticket corresponde al Rut y DV generados son correctos al emitido (stored procedure)</comment>
  </data>
  <data name="VALIDAR_ACCESO_TICKET_EXTRANJERO" xml:space="preserve">
    <value>dbo.sp_ValidarTicketExtranjero @IdTicket, @Correo, @IdEvento</value>
    <comment>Valida un ticket si corresponde al correo son correctos al emitido</comment>
  </data>
  <data name="VALIDAR_ACCESO_TICKET_FULL_ACCESS" xml:space="preserve">
    <value>dbo.sp_ValidarTicketFullAccess @IdTicket, @IdEvento</value>
    <comment>Valida un ticket Full Access (Por un fix determinado)</comment>
  </data>
  <data name="VALIDAR_TICKETS_DESCARGADOS" xml:space="preserve">
    <value>IF EXISTS (SELECT 1 FROM dbo.PreferenceTicket WHERE TransactionId = @TransactionId AND Descargados = 1)
	BEGIN
		SELECT 0
	END
	ELSE
	BEGIN 
		UPDATE dbo.PreferenceTicket
		SET Descargados = 1
		FROM [dbo].[PreferenceTicket] P
		WHERE TransactionId = @TransactionId

		SELECT 1
	END</value>
    <comment>Cambia el estado de descargados si el cliente ya ha generado sus tickets después de la compra</comment>
  </data>
</root>